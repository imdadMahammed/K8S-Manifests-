What is configmap and what probelm it will solve in kubernetes?
---------------------------------------------------------------
ConfigMaps can be used to store key-value pairs or configuration files that your application needs during runtime. 
Common examples of configuration data that can be stored in ConfigMaps include environment variables, application properties, command-line arguments, and other settings that might vary across different environments or deployments.

ConfigMaps solve several problems in Kubernetes:
------------------------------------------------
Separation of Configuration from Code: 
        Keeping configuration separate from application code promotes the "12-factor app" principles, making applications more portable and easier to manage.

Dynamic Configuration Updates:
        ConfigMaps allow you to update configurations without redeploying the application. This makes it possible to adjust settings on the fly, even while the application is running.

Environment Agnostic: 
        ConfigMaps let you define environment-specific configuration values, enabling your application to run consistently across different environments (development, staging, production, etc.) without changes to the underlying code.

Configuration Centralization:
        Instead of hardcoding configuration data into each container, you can centralize and manage it using ConfigMaps, making it more maintainable.

Sharing Configuration among Containers:
        ConfigMaps can be mounted as volumes or exposed as environment variables, allowing you to share common configurations across multiple containers within a pod.

To create a ConfigMap, you define it in a YAML or JSON file and then apply it to the Kubernetes cluster using the kubectl apply command

A Sample Example of a ConfigMap Using Environment Variables:
------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
data:
  DATABASE_URL: "db.example.com"
  CACHE_SIZE: "100"

After creating the ConfigMap, you can reference its values in pods using environment variables or volumes. For instance, in a pod's YAML definition:

Mount ConfigMap data Using Environment Variables inside your pod :
------------------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - name: my-app-container
    image: my-app-image
    env:
    - name: DATABASE_URL
      valueFrom:
        configMapKeyRef:
          name: my-config
          key: DATABASE_URL
    - name: CACHE_SIZE
      valueFrom:
        configMapKeyRef:
          name: my-config
          key: CACHE_SIZE

we have a pod named my-app with a container named my-app-container. We define two environment variables, DATABASE_URL and CACHE_SIZE, and set their values using the valueFrom field with configMapKeyRef. 
This points to the my-config ConfigMap and specifies the keys (DATABASE_URL and CACHE_SIZE) to fetch their values.

Mount ConfigMap data as a volume inside your pod Using Volumes:
---------------------------------------------------------------
We can also mount ConfigMap data as a volume inside your pod. For Example
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  volumes:
  - name: config-volume
    configMap:
      name: my-config
  containers:
  - name: my-app-container
    image: my-app-image
    volumeMounts:
    - name: config-volume
      mountPath: "/etc/config"

In this example, we have a pod named my-app with a volume named config-volume. The config-volume is created from the my-config ConfigMap. 
Then, inside the my-app-container, we mount this volume at the path /etc/config.

With this setup, the ConfigMap data will be available as files in the /etc/config directory within the container.
For example, the DATABASE_URL value will be available in a file named DATABASE_URL within the /etc/config directory.

Using volumes allows you to access the configuration data as files, which can be more suitable for certain applications that expect configuration files rather than environment variables.

Commands to create a Config-map
-------------------------------
# kubectl apply -f configmap.yaml
# kubectl get configmap

This way, you can manage and update configurations independently from your application, providing greater flexibility and maintainability in a Kubernetes environment.
